import Mathlib.CategoryTheory.Category.Grpd
import GroupoidModel.ForMathlib
import GroupoidModel.Grothendieck.Groupoidal.Basic
import GroupoidModel.ForMathlib.CategoryTheory.Functor.IsPullback

/-!
Here we define pointed categories and pointed groupoids as well as prove some basic lemmas.
-/

universe w v u v‚ÇÅ u‚ÇÅ v‚ÇÇ u‚ÇÇ

noncomputable section

namespace CategoryTheory

attribute [local simp] eqToHom_map Grpd.id_eq_id Grpd.comp_eq_comp Functor.id_comp

open Functor

abbrev PCat := ‚à´ ùü≠ Cat.{v,u}

namespace PCat

open Grothendieck

-- TODO remove this
/-- The functor that takes PCat to Cat by forgetting the points-/
abbrev forgetToCat : PCat.{v,u} ‚•§ Cat.{v,u} :=
  Functor.Grothendieck.forget _

-- write using `\d=`
prefix:max "‚áì" => forgetToCat.obj

-- write using `\d==`
postfix:max "‚ü±" => forgetToCat.map

lemma forgetToCat_map {C D : PCat} (F : C ‚ü∂ D) :
    F‚ü± = F.base := rfl

@[simp]
theorem id_obj {C : PCat} (X : C.base) : (ùüô C)‚ü±.obj X = X :=
  rfl

@[simp]
theorem id_map {C : PCat} {X Y : C.base} (f : X ‚ü∂ Y) :
    (ùüô C)‚ü±.map f = f :=
  rfl

@[simp] lemma id_fiber {C : PCat} : Hom.fiber (ùüô C) = ùüô _ := rfl

@[simp]
theorem comp_obj {C D E : PCat} (F : C ‚ü∂ D) (G : D ‚ü∂ E) (X : C.base) :
    (F ‚â´ G)‚ü±.obj X = G‚ü±.obj (F‚ü±.obj X) :=
  rfl

@[simp]
theorem comp_map {C D E : PCat} (F : C ‚ü∂ D) (G : D ‚ü∂ E) {X Y : C.base}
    (f : X ‚ü∂ Y) : (F ‚â´ G)‚ü±.map f = G‚ü±.map (F‚ü±.map f) :=
  rfl

@[simp] lemma comp_fiber {C D E : PCat} (F : C ‚ü∂ D) (G : D ‚ü∂ E) :
    (F ‚â´ G).fiber = G‚ü±.map F.fiber ‚â´ G.fiber := by
  simp

-- formerly `map_id_point`
@[simp] theorem map_id_fiber {C : Type u} [Category.{v} C] {F : C ‚•§ PCat}
    {x : C} : (F.map (ùüô x)).fiber =
    eqToHom (by simp) := by
  rw! [Functor.map_id]
  simp

-- formerly `map_comp_point`
@[simp] theorem map_comp_fiber {C : Type u} [Category.{v} C] {F : C ‚•§ PCat}
    {x y z: C} (f : x ‚ü∂ y) (g : y ‚ü∂ z) : (F.map (f ‚â´ g)).fiber =
    eqToHom (by simp) ‚â´ (F.map g)‚ü±.map (F.map f).fiber ‚â´ (F.map g).fiber := by
  rw! [Functor.map_comp]
  simp

/-- This is the proof of equality used in the eqToHom in `PCat.eqToHom_point` -/
theorem eqToHom_point_aux {P1 P2 : PCat.{v,u}} (eq : P1 = P2) :
    (eqToHom eq)‚ü±.obj P1.fiber = P2.fiber := by
  subst eq
  simp

/-- This shows that the fiber map of an eqToHom in PCat is an eqToHom-/
theorem eqToHom_fiber {P1 P2 : PCat.{v,u}} (eq : P1 = P2) :
    (eqToHom eq).fiber = (eqToHom (eqToHom_point_aux eq)) := by
  subst eq
  simp

section
variable {Œì : Type u‚ÇÇ} [Category.{v‚ÇÇ} Œì]

-- TODO factor through `objFiber'`
section
variable (Œ± : Œì ‚•§ PCat.{v‚ÇÅ,u‚ÇÅ})

-- formerly `objPt`
def objFiber (x : Œì) : ‚áì(Œ±.obj x) := (Œ±.obj x).fiber

-- formerly `mapObjPt`
def mapObjFiber {x y : Œì} (f : x ‚ü∂ y) : ‚áì(Œ±.obj y) :=
    (Œ±.map f)‚ü±.obj (objFiber Œ± x)

-- formerly `mapPoint`
def mapFiber {x y : Œì} (f : x ‚ü∂ y) :
    mapObjFiber Œ± f ‚ü∂ objFiber Œ± y := (Œ±.map f).fiber

-- formerly `mapPoint_id`
@[simp] theorem mapFiber_id {x} : mapFiber Œ± (ùüô x) =
    eqToHom (by simp [mapObjFiber]) := by
  simp [mapFiber]

-- formerly `mapPoint_comp`
theorem mapFiber_comp {x y z} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    mapFiber Œ± (f ‚â´ g)
    = eqToHom (by simp [mapObjFiber, objFiber])
      ‚â´ (Œ±.map g)‚ü±.map (mapFiber Œ± f) ‚â´ mapFiber Œ± g := by
  simp [mapFiber]

end

theorem eqToHom_base_map {x y : PCat} (eq : x = y) {a b} (f : a ‚ü∂ b) :
    (eqToHom eq).base.map f = eqToHom (by simp) ‚â´ (eqToHom (by simp [eq] : x.base = y.base)).map f ‚â´ eqToHom (by simp) := by
  cases eq
  simp

end

def asSmallFunctor : PCat.{v, u} ‚•§ PCat.{max w v u, max w v u} :=
  Grothendieck.functorTo
    (Functor.Grothendieck.forget _ ‚ãô Cat.asSmallFunctor.{w,v,u})
    (fun x => ‚ü®x.fiber‚ü©)
    (fun f => ‚ü®f.fiber‚ü©)
    (fun _ => rfl)
    (fun _ _ => rfl)

end PCat

/- Implementation note:
  Unlike with `Grothendieck.Groupoidal` we simplify everything down to
  the underlying `Grothendieck` definitions
-/

abbrev PGrpd := Functor.Grothendieck Grpd.forgetToCat.{v,u}

namespace PGrpd

open Grothendieck Grpd

-- TODO remove this
/-- The functor that takes PGrpd to Grpd by forgetting the points -/
abbrev forgetToGrpd : PGrpd.{v,u} ‚•§ Grpd.{v,u} :=
  Functor.Grothendieck.forget _

/-- The forgetful functor from PGrpd to PCat -/
def forgetToPCat : PGrpd.{v,u} ‚•§ PCat.{v,u} :=
  pre (Functor.id Cat) forgetToCat

-- write using `\d=`
prefix:max "‚áì" => forgetToGrpd.obj

-- write using `\d==`
postfix:max "‚ü±" => forgetToGrpd.map

lemma forgetToGrpd_map {C D : PGrpd} (F : C ‚ü∂ D) :
    F‚ü± = F.base := rfl

@[simp]
theorem id_obj {C : PGrpd} (X : C.base) : (ùüô C)‚ü±.obj X = X :=
  rfl

@[simp]
theorem id_map {C : PGrpd} {X Y : C.base} (f : X ‚ü∂ Y) :
    (ùüô C)‚ü±.map f = f :=
  rfl

@[simp] lemma id_fiber {C : PGrpd} : Hom.fiber (ùüô C) = ùüô _ := rfl

@[simp]
theorem comp_obj {C D E : PGrpd} (F : C ‚ü∂ D) (G : D ‚ü∂ E) (X : C.base) :
    (F ‚â´ G)‚ü±.obj X = G‚ü±.obj (F‚ü±.obj X) :=
  rfl

@[simp]
theorem comp_map {C D E : PGrpd} (F : C ‚ü∂ D) (G : D ‚ü∂ E) {X Y : C.base}
    (f : X ‚ü∂ Y) : (F ‚â´ G)‚ü±.map f = G‚ü±.map (F‚ü±.map f) :=
  rfl

-- formerly `comp_point`
@[simp] lemma comp_fiber {C D E : PGrpd} (F : C ‚ü∂ D) (G : D ‚ü∂ E) :
    (F ‚â´ G).fiber = G‚ü±.map F.fiber ‚â´ G.fiber := by
  simp [forgetToCat]

-- formerly `map_id_point`
@[simp] theorem map_id_fiber {C : Type u} [Category.{v} C] {F : C ‚•§ PGrpd}
    {x : C} : (F.map (ùüô x)).fiber =
    eqToHom (by simp [forgetToCat]) := by
  rw! [Functor.map_id]
  simp

-- formerly `map_comp_point`
@[simp] theorem map_comp_fiber {C : Type u} [Category.{v} C] {F : C ‚•§ PGrpd}
    {x y z: C} (f : x ‚ü∂ y) (g : y ‚ü∂ z) : (F.map (f ‚â´ g)).fiber =
    eqToHom (by simp [forgetToCat]) ‚â´ (F.map g)‚ü±.map (F.map f).fiber ‚â´ (F.map g).fiber := by
  rw! [Functor.map_comp]
  simp
  rfl

/-- This is the proof of equality used in the eqToHom in `PGrpd.eqToHom_point` -/
theorem eqToHom_point_aux {P1 P2 : PGrpd.{v,u}} (eq : P1 = P2) :
    (eqToHom eq)‚ü±.obj P1.fiber = P2.fiber := by
  subst eq
  simp

/-- This shows that the fiber map of an eqToHom in PGrpd is an eqToHom-/
theorem eqToHom_fiber {P1 P2 : PGrpd.{v,u}} (eq : P1 = P2) :
    (eqToHom eq).fiber = (eqToHom (eqToHom_point_aux eq)) := by
  subst eq
  simp [forgetToCat]

instance : forgetToGrpd.ReflectsIsomorphisms := by
  constructor
  intro A B F hiso
  rcases hiso with ‚ü® G , hFG , hGF ‚ü©
  use Hom.mk G (G.map (Groupoid.inv F.fiber)
    ‚â´ eqToHom (Functor.congr_obj hFG A.fiber))
  constructor
  ¬∑ apply Grothendieck.Hom.ext
    ¬∑ simp [Grpd.forgetToCat]
    ¬∑ exact hFG
  ¬∑ apply Grothendieck.Hom.ext
    ¬∑ have := Functor.congr_hom hGF F.fiber
      simp only [Grpd.comp_eq_comp, Functor.comp_map, forgetToGrpd_map] at this
      simp [this, Grpd.forgetToCat]
    ¬∑ exact hGF

section
variable {Œì : Type u‚ÇÇ} [Category.{v‚ÇÇ} Œì]

-- TODO factor through `objFiber'`
section
variable (Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ})

-- formerly `objPt`
def objFiber (x : Œì) : ‚áì(Œ±.obj x) := (Œ±.obj x).fiber

theorem objFiber_naturality {Œî : Type*} [Category Œî] (œÉ : Œî ‚•§ Œì) (Œ± : Œì ‚•§ PGrpd) (x : Œî) :
    objFiber (œÉ ‚ãô Œ±) x = objFiber Œ± (œÉ.obj x) :=
  rfl

-- formerly `mapObjPt`
def mapObjFiber {x y : Œì} (f : x ‚ü∂ y) : ‚áì(Œ±.obj y) :=
    (Œ±.map f)‚ü±.obj (objFiber Œ± x)

-- formerly `mapPoint`
def mapFiber {x y : Œì} (f : x ‚ü∂ y) :
    mapObjFiber Œ± f ‚ü∂ objFiber Œ± y := (Œ±.map f).fiber

-- formerly `mapPoint_id`
@[simp] theorem mapFiber_id {x} : mapFiber Œ± (ùüô x) =
    eqToHom (by simp [mapObjFiber]) := by
  simp [mapFiber]

-- formerly `mapPoint_comp`
theorem mapFiber_comp {x y z} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    mapFiber Œ± (f ‚â´ g)
    = eqToHom (by simp [mapObjFiber, objFiber])
      ‚â´ (Œ±.map g)‚ü±.map (mapFiber Œ± f) ‚â´ mapFiber Œ± g := by
  simp [mapFiber]

theorem mapFiber_naturality {Œî : Type*} [Category Œî] (œÉ : Œî ‚•§ Œì) {x y} (f : x ‚ü∂ y) :
    mapFiber (œÉ ‚ãô Œ±) f = mapFiber Œ± (œÉ.map f) := by
  simp [mapFiber]

end

section
/-
     ---------------> PGrpd
   Œ± |                  |
     |                  | forgetToGrpd
     |                  V
    Œì ---------------> Grpd
            A
-/
variable {A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}} {Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}} (h : Œ± ‚ãô PGrpd.forgetToGrpd = A)

/-- This definition ensures that we deal with the functor
(Œ± ‚ãô forgetToGrpd).obj x ‚•§ A.obj x
as opposed to the
-/
@[simp] abbrev objFiber'EqToHom (x : Œì) : (Œ± ‚ãô forgetToGrpd).obj x ‚•§ A.obj x :=
  eqToHom (Functor.congr_obj h x)

-- formerly `objPt'`
def objFiber' (x : Œì) : A.obj x :=
  (objFiber'EqToHom h x).obj (objFiber Œ± x)

@[simp] lemma objFiber'_rfl (x : Œì) : objFiber' rfl x = objFiber Œ± x := rfl

@[simp] theorem objFiber'_heq {x} : HEq (PGrpd.objFiber' h x) (Œ±.obj x).fiber := by
  simp [PGrpd.objFiber', PGrpd.objFiber, Grpd.eqToHom_obj]

theorem objFiber'_naturality {Œî : Type*} [Category Œî] (œÉ : Œî ‚•§ Œì) {A : Œì ‚•§ Grpd.{v‚ÇÅ,u‚ÇÅ}}
    {Œ± : Œì ‚•§ PGrpd.{v‚ÇÅ,u‚ÇÅ}} (h : Œ± ‚ãô PGrpd.forgetToGrpd = A) (x : Œî) :
    @objFiber' _ _ (œÉ ‚ãô A) (œÉ ‚ãô Œ±) (by rw [‚Üê h]; rfl) x = objFiber' h (œÉ.obj x) :=
  rfl

def mapFiber'EqToHom {x y : Œì} (f : x ‚ü∂ y) : (A.map f).obj (objFiber' h x) ‚ü∂
    (objFiber'EqToHom h y).obj (((Œ±.map f).base).obj (Œ±.obj x).fiber) :=
  eqToHom (by
  simp [Functor.congr_hom h.symm f, Functor.comp_obj, Grpd.comp_eq_comp, objFiber',
    Grpd.eqToHom_obj, cast_cast]
  rfl)

-- formerly `mapPoint'`
def mapFiber' {x y : Œì} (f : x ‚ü∂ y) :
    (A.map f).obj (objFiber' h x) ‚ü∂ objFiber' h y :=
  mapFiber'EqToHom h f ‚â´ (objFiber'EqToHom h y).map (Œ±.map f).fiber

@[simp] theorem mapFiber'_id {x} :
    mapFiber' h (ùüô x) = eqToHom (by simp) := by
  subst h
  simp only [mapFiber', map_id_fiber]
  apply eq_of_heq
  simp [mapFiber'EqToHom]

@[simp] theorem mapFiber'_heq {x y} (f : x ‚ü∂ y) :
    HEq (PGrpd.mapFiber' h f) (Œ±.map f).fiber := by
  simp only [PGrpd.mapFiber', mapFiber'EqToHom]
  aesop_cat

include h in
theorem mapFiber'_comp_aux0 {z} : Grpd.of ‚áì(Œ±.obj z) = A.obj z := by
  subst h
  rfl

theorem mapFiber'_comp_aux1 {x y z} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    (A.map (f ‚â´ g)).obj (objFiber' h x) =
    (eqToHom (mapFiber'_comp_aux0 h)).obj ((Œ±.map (f ‚â´ g))‚ü±.obj ((Œ±.obj x)).fiber) := by
  subst h
  simp [objFiber]

theorem mapFiber'_comp {x y z} (f : x ‚ü∂ y)
    (g : y ‚ü∂ z) : mapFiber' h (f ‚â´ g)
    = eqToHom (by rw [mapFiber'_comp_aux1 h f g]; simp [forgetToCat]) ‚â´
    (eqToHom (mapFiber'_comp_aux0 h)).map ((Œ±.map g).base.map (Œ±.map f).fiber)
    ‚â´ (eqToHom (mapFiber'_comp_aux0 h)).map (Œ±.map g).fiber := by
  simp [mapFiber', eqToHom_map, mapFiber'EqToHom]

theorem mapFiber'_naturality {Œî : Type*} [Category Œî] (œÉ : Œî ‚•§ Œì) {x y} (f : x ‚ü∂ y) :
    @mapFiber' _ _ (œÉ ‚ãô A) (œÉ ‚ãô Œ±) (by rw [Functor.assoc, h]) _ _ f
    = mapFiber' h (œÉ.map f) := by
  simp [mapFiber', mapFiber'EqToHom]

@[simp] theorem mapFiber'_rfl {x y : Œì} (f : x ‚ü∂ y) : mapFiber' rfl f = mapFiber Œ± f := by
  simp [mapFiber', mapFiber, mapFiber'EqToHom]

end

theorem Functor.hext (F G : Œì ‚•§ PGrpd)
    (hbase : F ‚ãô forgetToGrpd = G ‚ãô forgetToGrpd)
    (hfiber_obj : ‚àÄ x : Œì, HEq (F.obj x).fiber (G.obj x).fiber)
    (hfiber_map : ‚àÄ {x y : Œì} (f : x ‚ü∂ y), HEq (F.map f).fiber (G.map f).fiber)
    : F = G :=
  Grothendieck.FunctorTo.hext F G hbase hfiber_obj hfiber_map

section
variable {Œì : Type u‚ÇÅ} [Category.{v‚ÇÅ} Œì]
variable (A : Œì ‚•§ Grpd) (fibObj : Œ† (x : Œì), A.obj x)
    (fibMap : Œ† {x y : Œì} (f : x ‚ü∂ y),
      (A.map f).obj (fibObj x) ‚ü∂ fibObj y)

theorem functorTo_map_id_aux (x : Œì) : (A.map (ùüô x)).obj (fibObj x) = fibObj x := by
  simp

theorem functorTo_map_comp_aux {x y z : Œì} (f : x ‚ü∂ y) (g : y ‚ü∂ z) :
    (A.map (f ‚â´ g)).obj (fibObj x)
    = (A.map g).obj ((A.map f).obj (fibObj x)) := by
  simp

section
variable
    (map_id : Œ† (x : Œì), fibMap (CategoryStruct.id x) = eqToHom (functorTo_map_id_aux _ _ _))
    (map_comp : Œ† {x y z : Œì} (f : x ‚ü∂ y) (g : y ‚ü∂ z), fibMap (f ‚â´ g)
      = eqToHom (functorTo_map_comp_aux _ _ _ _) ‚â´ (A.map g).map (fibMap f) ‚â´ fibMap g)

/-- To define a functor into `PGrpd` we can make use of an existing functor into `Grpd`.
  This is definitinoally just `Grothendieck.functorTo`,
  but giving the user a slightly less bloated context. -/
def functorTo : Œì ‚•§ PGrpd := Grothendieck.functorTo A fibObj fibMap map_id map_comp

@[simp] theorem functorTo_obj_base (x) :
    ((functorTo A fibObj fibMap map_id map_comp).obj x).base = A.obj x :=
  rfl

@[simp] theorem functorTo_obj_fiber (x) :
    ((functorTo A fibObj fibMap map_id map_comp).obj x).fiber = fibObj x :=
  rfl

@[simp] theorem functorTo_map_base {x y} (f : x ‚ü∂ y) :
    ((functorTo A fibObj fibMap map_id map_comp).map f).base = A.map f :=
  rfl

@[simp] theorem functorTo_map_fiber {x y} (f : x ‚ü∂ y) :
    ((functorTo A fibObj fibMap map_id map_comp).map f).fiber = fibMap f :=
  rfl

variable {A} {fibObj} {fibMap} {map_id} {map_comp}
@[simp] theorem functorTo_forget :
    functorTo _ _ _ map_id map_comp ‚ãô Functor.Grothendieck.forget _ = A :=
  rfl

end

end

end

end PGrpd

end CategoryTheory

end
